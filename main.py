import os
import telebot
import requests
import pandas as pd
import json
import re
import logging
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import sqlite3
from datetime import datetime

# Logging sozlamalari
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# TOKEN olish
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("TOKEN mavjud emas")

bot = telebot.TeleBot(TOKEN)

# Google Sheets sozlamalari
SHEET_ID = os.getenv("SHEET_ID")
SHEET_GID = os.getenv("SHEET_GID", "0")
if not SHEET_ID:
    raise ValueError("SHEET_ID mavjud emas")

API_URL = f"https://docs.google.com/spreadsheets/d/{SHEET_ID}/gviz/tq?tqx=out:json&gid={SHEET_GID}"

# SQLite bazasini yaratish
def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            usage_count INTEGER DEFAULT 0,
            last_used TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# Til sozlamalari
LANGUAGES = {
    'uz': {
        'welcome': "Assalomu alaykum! üëã\n\nPasport raqamingizni yuboring, men guruhingiz va guruh havolangizni topib beraman.",
        'format': "üìù Pasport raqamini shu formatda yuboring: AA1234567",
        'example': "Misol: AD9829103",
        'change_lang': "üåê Tilni o'zgartirish",
        'search': "üîç Pasport qidirish",
        'help': "üÜò Yordam",
        'debug': "üêõ Debug ma'lumot",
        'info': "‚ÑπÔ∏è Mening ma'lumotlarim",
        'back': "‚¨ÖÔ∏è Orqaga",
        'wrong_format': "‚ùå Noto'g'ri format! Pasport raqami quyidagi formatda bo'lishi kerak: AA1234567",
        'not_found': "‚ùå {} raqami bo'yicha ma'lumot topilmadi.",
        'found': "‚úÖ Ma'lumot topildi!\n\nüìã Pasport: {}\nüë§ Ism: {}\nüè´ Fakultet: {}\nüë• Guruh: {}\nüîó Havola: {}",
        'error': "üòî Xatolik yuz berdi. Iltimos, keyinroq qayta urinib ko'ring.",
        'choose_lang': "üåê Tilni tanlang:",
        'main_menu': "üè† Asosiy menyu",
        'usage_limit': "üö´ Siz faqat 1 marta foydalana olasiz! Bu shaxsiy ma'lumotlarni himoya qilish uchun.",
        'user_info': "üìä Sizning ma'lumotlaringiz:\n\nüë§ ID: {}\nüìõ Ism: {}\nüìÖ Birinchi foydalanish: {}\nüî¢ Foydalanishlar soni: {}/1\n‚è∞ So'ngi foydalanish: {}",
        'first_usage': "Bu sizning birinchi foydalanishingiz. Ma'lumotlaringiz saqlandi.",
        'admin_contact': "üìû Admin bilan bog'lanish"
    },
    'ru': {
        'welcome': "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞, –∏ —è –Ω–∞–π–¥—É –≤–∞—à—É –≥—Ä—É–ø–ø—É –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É.",
        'format': "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: AA1234567",
        'example': "–ü—Ä–∏–º–µ—Ä: AD9829103",
        'change_lang': "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        'search': "üîç –ü–æ–∏—Å–∫ –ø–∞—Å–ø–æ—Ä—Ç–∞",
        'help': "üÜò –ü–æ–º–æ—â—å",
        'debug': "üêõ –û—Ç–ª–∞–¥–∫–∞",
        'info': "‚ÑπÔ∏è –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ",
        'back': "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        'wrong_format': "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: AA1234567",
        'not_found': "‚ùå –ü–æ –Ω–æ–º–µ—Ä—É {} –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
        'found': "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞!\n\nüìã –ü–∞—Å–ø–æ—Ä—Ç: {}\nüë§ –ò–º—è: {}\nüè´ –§–∞–∫—É–ª—å—Ç–µ—Ç: {}\nüë• –ì—Ä—É–ø–ø–∞: {}\nüîó –°—Å—ã–ª–∫–∞: {}",
        'error': "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        'choose_lang': "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        'main_menu': "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        'usage_limit': "üö´ –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑! –≠—Ç–æ –¥–ª—è –∑–∞—â–∏—Ç—ã –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
        'user_info': "üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\nüë§ ID: {}\nüìõ –ò–º—è: {}\nüìÖ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {}\nüî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {}/1\n‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {}",
        'first_usage': "–≠—Ç–æ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
        'admin_contact': "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º"
    },
    'en': {
        'welcome': "Hello! üëã\n\nSend your passport number, and I'll find your group and group link.",
        'format': "üìù Send passport number in format: AA1234567",
        'example': "Example: AD9829103",
        'change_lang': "üåê Change language",
        'search': "üîç Search passport",
        'help': "üÜò Help",
        'debug': "üêõ Debug info",
        'info': "‚ÑπÔ∏è My information",
        'back': "‚¨ÖÔ∏è Back",
        'wrong_format': "‚ùå Wrong format! Passport number should be in format: AA1234567",
        'not_found': "‚ùå No information found for number {}.",
        'found': "‚úÖ Information found!\n\nüìã Passport: {}\nüë§ Name: {}\nüè´ Faculty: {}\nüë• Group: {}\nüîó Link: {}",
        'error': "üòî An error occurred. Please try again later.",
        'choose_lang': "üåê Choose language:",
        'main_menu': "üè† Main menu",
        'usage_limit': "üö´ You can only use 1 time! This is to protect personal data.",
        'user_info': "üìä Your information:\n\nüë§ ID: {}\nüìõ Name: {}\nüìÖ First usage: {}\nüî¢ Usage count: {}/1\n‚è∞ Last used: {}",
        'first_usage': "This is your first usage. Your data has been saved.",
        'admin_contact': "üìû Contact admin"
    }
}

# Foydalanuvchi tillari saqlash
user_languages = {}

def get_user_language(chat_id):
    """Foydalanuvchi tilini olish"""
    return user_languages.get(chat_id, 'uz')

def check_usage_limit(user_id):
    """Foydalanish cheklovini tekshirish"""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT usage_count FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    
    conn.close()
    
    if result and result[0] >= 1:
        return False  # Cheklovga duchor
    return True  # Foydalanish mumkin

def update_user_usage(message):
    """Foydalanuvchi ma'lumotlarini yangilash"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    
    # Foydalanuvchi mavjudligini tekshirish
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    existing_user = cursor.fetchone()
    
    if existing_user:
        # Yangilash
        cursor.execute('''
            UPDATE users 
            SET usage_count = usage_count + 1, 
                last_used = CURRENT_TIMESTAMP,
                username = ?, first_name = ?, last_name = ?
            WHERE user_id = ?
        ''', (username, first_name, last_name, user_id))
    else:
        # Yangi foydalanuvchi
        cursor.execute('''
            INSERT INTO users (user_id, username, first_name, last_name, usage_count, last_used)
            VALUES (?, ?, ?, ?, 1, CURRENT_TIMESTAMP)
        ''', (user_id, username, first_name, last_name))
    
    conn.commit()
    conn.close()

def get_user_info(user_id):
    """Foydalanuvchi ma'lumotlarini olish"""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT user_id, username, first_name, last_name, usage_count, 
               created_at, last_used 
        FROM users WHERE user_id = ?
    ''', (user_id,))
    
    result = cursor.fetchone()
    conn.close()
    
    return result

def create_main_keyboard(lang):
    """Asosiy keyboard yaratish"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    lang_text = LANGUAGES[lang]
    
    keyboard.add(
        KeyboardButton(lang_text['search']),
        KeyboardButton(lang_text['info']),
        KeyboardButton(lang_text['help']),
        KeyboardButton(lang_text['debug'])
    )
    keyboard.add(KeyboardButton(lang_text['change_lang']))
    
    return keyboard

def create_language_keyboard(lang):
    """Til tanlash keyboard yaratish"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    lang_text = LANGUAGES[lang]
    
    keyboard.add(
        KeyboardButton("üá∫üáø O'zbek"),
        KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π"),
        KeyboardButton("üá∫üá∏ English")
    )
    keyboard.add(KeyboardButton(lang_text['back']))
    
    return keyboard

def create_back_keyboard(lang):
    """Faqat orqaga tugmasi"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(LANGUAGES[lang]['back']))
    return keyboard

def load_data():
    """Google Sheets'dan jadvalni DataFrame sifatida olish"""
    try:
        resp = requests.get(API_URL, timeout=10)
        resp.raise_for_status()
        
        text = resp.text

        # Google JSON formatini tozalash
        match = re.search(r"google.visualization.Query.setResponse\((.*)\);", text, re.DOTALL)
        if not match:
            raise ValueError("Google Sheets JSON ni o'qib bo'lmadi")
        
        json_str = match.group(1)
        data = json.loads(json_str)

        # Ustun nomlari - birinchi qatordagi ma'lumotlardan olamiz
        if data["table"]["rows"]:
            first_row = data["table"]["rows"][0]
            cols = [cell["v"] if cell and "v" in cell else f"Column_{i+1}" 
                   for i, cell in enumerate(first_row["c"])]
        else:
            # Agar qator bo'lmasa, default nomlar
            cols = [f"Column_{i+1}" for i in range(len(data["table"]["cols"]))]

        # Qatorlar (birinchi qatorni o'tkazib yuboramiz, chunki u sarlavha)
        rows = []
        for i, r in enumerate(data["table"]["rows"]):
            if i == 0:  # Birinchi qator sarlavha, uni o'tkazib yuboramiz
                continue
            values = [cell["v"] if cell and "v" in cell else "" for cell in r["c"]]
            rows.append(values)

        df = pd.DataFrame(rows, columns=cols)
        logger.info(f"Ma'lumotlar muvaffaqiyatli yuklandi. {len(df)} qator")
        logger.info(f"Ustunlar: {list(df.columns)}")
        return df
        
    except requests.exceptions.RequestException as e:
        logger.error(f"Google Sheets ga ulanishda xatolik: {e}")
        raise
    except Exception as e:
        logger.error(f"Ma'lumotlarni o'qishda xatolik: {e}")
        raise

# /start komandasi
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_languages[message.chat.id] = 'uz'  # Default til
    lang = get_user_language(message.chat.id)
    lang_text = LANGUAGES[lang]
    
    welcome_text = (
        f"{lang_text['welcome']}\n\n"
        f"{lang_text['format']}\n\n"
        f"{lang_text['example']}"
    )
    
    bot.send_message(
        message.chat.id, 
        welcome_text,
        reply_markup=create_main_keyboard(lang)
    )

# INFO tugmasi
@bot.message_handler(func=lambda msg: any(msg.text == LANGUAGES[lang]['info'] for lang in LANGUAGES))
def user_info(message):
    user_id = message.from_user.id
    lang = get_user_language(message.chat.id)
    lang_text = LANGUAGES[lang]
    
    user_data = get_user_info(user_id)
    
    if user_data:
        user_id, username, first_name, last_name, usage_count, created_at, last_used = user_data
        
        full_name = f"{first_name or ''} {last_name or ''}".strip() or "Noma'lum"
        created_str = created_at.split()[0] if created_at else "Noma'lum"
        last_used_str = last_used.split()[0] if last_used else "Hali foydalanilmagan"
        
        info_text = lang_text['user_info'].format(
            user_id, full_name, created_str, usage_count, last_used_str
        )
    else:
        info_text = "üìä Siz hali foydalanmagan
